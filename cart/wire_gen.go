// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"cart/catalogpb"
	"cart/config"
	"cart/consumer"
	"cart/core"
	"cart/jwtauth"
	"cart/logger"
	"cart/queue/kafka"
	"cart/repo/mysql"
	"cart/route"
	"context"
	"google.golang.org/grpc"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"
)

// Injectors from main.go:

func Init(conf *config.Config) (*App, error) {
	cartRepo, err := mysql.NewRepo(conf)
	if err != nil {
		return nil, err
	}
	jwtService := jwtauth.New()
	clientConnInterface := NewCatalogConn()
	catalogClient := catalogpb.NewCatalogClient(clientConnInterface)
	publisher := kafka.NewProducer(conf)
	cartService := core.NewService(cartRepo, jwtService, catalogClient, publisher)
	handler := route.New(cartService)
	subscriber := kafka.NewConsumer(conf)
	port := consumer.InitRun(subscriber, cartService)
	app := &App{
		router: handler,
		port:   port,
	}
	return app, nil
}

// main.go:

type App struct {
	router http.Handler
	port   *consumer.Port
}

func main() {

	conf := config.New()

	app, err := Init(conf)
	if err != nil {
		log.Fatal(err)
	}

	go app.port.Run(context.Background())

	srv := &http.Server{
		Addr:    conf.HttpPort,
		Handler: app.router,
	}

	go func() {
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatal(err)
		}
	}()

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	log.Msg("shutting down server...")

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := srv.Shutdown(ctx); err != nil {
		log.Fatal(err)
	}
	log.Msg("Server exiting")
}

func NewCatalogConn() grpc.ClientConnInterface {
	conn, err := grpc.Dial(":9000", grpc.WithInsecure())
	if err != nil {
		log.Error(err)
	}
	defer conn.Close()

	return conn
}
